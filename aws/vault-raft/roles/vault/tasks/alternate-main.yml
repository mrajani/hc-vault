---
- amazon.aws.ec2_metadata_facts:
- name: Set AWS Region
  set_fact:
    aws_region: "{{ ansible_ec2_placement_region }}"

- name: Get KMS Key from SSM Parameter Store
  set_fact:
    aws_kms_key: "{{lookup('aws_ssm', 'vault_unseal_key')}}"

- name: Get Vault DNS URL
  set_fact:
    vault_dns: "{{lookup('aws_ssm', 'vault_dns_name')}}"

- name: Get S3 bucket store to save encrypted vault tokens
  set_fact:
    vault_s3: "{{lookup('aws_ssm', 'vault_tokens_encrypted')}}"

- name: Get Auto Join Key
  set_fact:
    tag_key: "{{lookup('aws_ssm', 'autojoin_tag_key')}}"

- name: Get Auto Join Tag Value
  set_fact:
    tag_value: "{{lookup('aws_ssm', 'autojoin_tag_value')}}"

- name: Install Unzip
  apt:
    pkg:
      - unzip
      - net-tools

- name: Download Vault executable
  get_url:
    url: https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip
    dest: /tmp/vault.zip

- name: Create vault group
  group:
    name: vault

- name: Create vault user
  user:
    name: vault
    group: vault

- name: Unzip vault to /usr/local/bin
  unarchive:
    src: /tmp/vault.zip
    dest: /usr/local/bin
    remote_src: yes
    group: vault
    owner: vault

- name: Create installation directories for vault config and logging
  file:
    path: "{{ item }}"
    state: directory
    group: vault
    owner: vault
  with_items:
    - /opt/vault/raft
    - /etc/vault.d

- name: Copy vault config over
  template:
    src: vault.j2
    dest: /etc/vault.d/vault.hcl
    owner: vault
    group: vault

- name: Copy over vault systemctl config
  copy:
    src: vault.service
    dest: /lib/systemd/system/vault.service
    group: vault
    owner: vault

- name: Copy Vault Certs
  copy:
    src: "/home/{{user}}/{{ item }}"
    dest: /etc/vault.d/{{ item }}
    group: vault
    owner: vault
    mode: "0600"
  with_items:
    - ca.crt.pem
    - vault.crt.pem
    - vault.key.pem

- name: Restart systemctl daemon
  shell: systemctl daemon-reload

- name: Enable vault server
  shell: systemctl enable vault

- name: Start vault server
  shell: systemctl start vault

- name: Pause till the servers are started
  wait_for:
    timeout: 180
    port: 8200
    host: "{{ ansible_default_ipv4.address }}"

- name: Verify Vault Initialized
  environment:
    VAULT_ADDR: "https://{{ ansible_default_ipv4.address }}:8200"
  command: /usr/local/bin/vault operator init -status -tls-skip-verify
  ignore_errors: true
  changed_when:
    - status.rc == 2
    - '"Vault is not initialized" in status.stdout'
  register: status

- name: Initialize Vault
  environment:
    VAULT_ADDR: "https://{{ ansible_default_ipv4.address }}:8200"
  command: /usr/local/bin/vault operator init -tls-skip-verify
  register: unseal_keys
  when: '"Vault is not initialized" in status.stdout'

- name: Show Unseal keys
  debug:
    var: unseal_keys

- name: Save the unseal keys to file
  copy:
    content: "{{ unseal_keys.stdout }}"
    dest: /tmp/unseal_keys.txt
  when: '"Vault is not initialized" in status.stdout'

- name: Encrypt Recovery-Unseal Keys in S3 with KMS key
  args:
    executable: /bin/bash
    chdir: /tmp
  shell: |
    aws kms encrypt --region "{{ aws_region }}" --key-id "{{ aws_kms_key }}" --plaintext fileb://unseal_keys.txt --output text --query CiphertextBlob | /usr/bin/base64 --decode > /tmp/vault_creds_encrypted
  register: output
  when: '"Vault is not initialized" in status.stdout'

- name: Show S3 cp output
  debug: msg={{ output }}
  when: '"Vault is not initialized" in status.stdout'

- name: Encrypt Recovery-Unseal Keys in S3 with KMS key
  amazon.aws.aws_s3:
    bucket: "{{ vault_s3 }}"
    object: /creds/vault_encrypted
    src: /tmp/vault_creds_encrypted
    mode: put
  when: '"Vault is not initialized" in status.stdout'

- name: Delete the plaintext key files
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - /tmp/unseal_keys.txt
